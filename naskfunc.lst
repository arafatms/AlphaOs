     1 00000000                                 ; naskfunc
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4 00000000                                 [FORMAT "WCOFF"]				; �I�u�W�F�N�g�t�@�C�����郂�[�h	
     5 00000000                                 [BITS 32]						; 32�r�b�g���[�h�p�̋@�B����点��
     6 00000000                                 [INSTRSET "i486p"]	
     7 00000000                                 
     8 00000000                                 ;制作目标文件信息
     9 00000000                                 
    10 00000000                                 [FILE "naskfunc.nas"]			;源文件名信息
    11 00000000                                 
    12 00000000                                 		; 程序中包含的函数名
    13 00000000                                 		GLOBAL	_io_hlt, _io_cli, _io_sti, _io_stihlt
    14 00000000                                 		GLOBAL	_io_in8,  _io_in16,  _io_in32
    15 00000000                                 		GLOBAL	_io_out8, _io_out16, _io_out32
    16 00000000                                 		GLOBAL	_io_load_eflags, _io_store_eflags
    17 00000000                                 		GLOBAL _load_gdtr, _load_idtr
    18 00000000                                 		GLOBAL	_load_tr
    19 00000000                                 		GLOBAL	_asm_inthandler21, _asm_inthandler27, _asm_inthandler2c
    20 00000000                                 		GLOBAL	_asm_inthandler20
    21 00000000                                 		GLOBAL	_asm_inthandler0c,_asm_inthandler0d
    22 00000000                                 		GLOBAL	_load_cr0, _store_cr0
    23 00000000                                 		GLOBAL	_asm_end_app,_memtest_sub
    24 00000000                                 		GLOBAL	_farjmp,_farcall
    25 00000000                                 		GLOBAL	_asm_cons_putchar
    26 00000000                                 		GLOBAL	_asm_hrb_api, _start_app
    27 00000000                                 		EXTERN	_inthandler21, _inthandler27, _inthandler2c
    28 00000000                                 		EXTERN	_inthandler20
    29 00000000                                 		EXTERN	_inthandler0c, _inthandler0d
    30 00000000                                 		EXTERN	_cons_putchar
    31 00000000                                 		EXTERN	_hrb_api
    32 00000000                                 		
    33 00000000                                 ; 一下是实际的函数
    34 00000000                                 
    35                                          [SECTION .text]		
    36 00000000                                 
    37 00000000                                 _io_hlt:	; void io_hlt(void);
    38 00000000 F4                              		HLT
    39 00000001 C3                              		RET
    40 00000002                                 
    41 00000002                                 _io_cli:	; void io_cli(void);
    42 00000002 FA                              		CLI
    43 00000003 C3                              		RET
    44 00000004                                 
    45 00000004                                 _io_sti:	; void io_sti(void);
    46 00000004 FB                              		STI
    47 00000005 C3                              		RET
    48 00000006                                 
    49 00000006                                 _io_stihlt:	; void io_stihlt(void);
    50 00000006 FB                              		STI
    51 00000007 F4                              		HLT
    52 00000008 C3                              		RET
    53 00000009                                 
    54 00000009                                 _io_in8:	; int io_in8(int port);
    55 00000009 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    56 0000000D B8 00000000                     		MOV		EAX,0
    57 00000012 EC                              		IN		AL,DX
    58 00000013 C3                              		RET
    59 00000014                                 
    60 00000014                                 _io_in16:	; int io_in16(int port);
    61 00000014 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    62 00000018 B8 00000000                     		MOV		EAX,0
    63 0000001D 66 ED                           		IN		AX,DX
    64 0000001F C3                              		RET
    65 00000020                                 
    66 00000020                                 _io_in32:	; int io_in32(int port);
    67 00000020 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    68 00000024 ED                              		IN		EAX,DX
    69 00000025 C3                              		RET
    70 00000026                                 
    71 00000026                                 _io_out8:	; void io_out8(int port, int data);
    72 00000026 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    73 0000002A 8A 44 24 08                     		MOV		AL,[ESP+8]		; data
    74 0000002E EE                              		OUT		DX,AL
    75 0000002F C3                              		RET
    76 00000030                                 
    77 00000030                                 _io_out16:	; void io_out16(int port, int data);
    78 00000030 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    79 00000034 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
    80 00000038 66 EF                           		OUT		DX,AX
    81 0000003A C3                              		RET
    82 0000003B                                 
    83 0000003B                                 _io_out32:	; void io_out32(int port, int data);
    84 0000003B 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    85 0000003F 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
    86 00000043 EF                              		OUT		DX,EAX
    87 00000044 C3                              		RET
    88 00000045                                 
    89 00000045                                 _io_load_eflags:	; int io_load_eflags(void);
    90 00000045 9C                              		PUSHFD		; PUSH EFLAGS �Ƃ����Ӗ�
    91 00000046 58                              		POP		EAX
    92 00000047 C3                              		RET
    93 00000048                                 
    94 00000048                                 _io_store_eflags:	; void io_store_eflags(int eflags);
    95 00000048 8B 44 24 04                     		MOV		EAX,[ESP+4]
    96 0000004C 50                              		PUSH	EAX
    97 0000004D 9D                              		POPFD		; POP EFLAGS �Ƃ����Ӗ�
    98 0000004E C3                              		RET
    99 0000004F                                 
   100 0000004F                                 _load_gdtr:		; void load_gdtr(int limit, int addr);
   101 0000004F 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
   102 00000054 66 89 44 24 06                  		MOV		[ESP+6],AX
   103 00000059 0F 01 54 24 06                  		LGDT	[ESP+6]
   104 0000005E C3                              		RET
   105 0000005F                                 
   106 0000005F                                 _load_idtr:		; void load_idtr(int limit, int addr);
   107 0000005F 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
   108 00000064 66 89 44 24 06                  		MOV		[ESP+6],AX
   109 00000069 0F 01 5C 24 06                  		LIDT	[ESP+6]
   110 0000006E C3                              		RET
   111 0000006F                                 
   112 0000006F                                 
   113 0000006F                                 _load_cr0:		; int load_cr0(void);
   114 0000006F 0F 20 C0                        		MOV		EAX,CR0
   115 00000072 C3                              		RET
   116 00000073                                 
   117 00000073                                 _store_cr0:		; void store_cr0(int cr0);
   118 00000073 8B 44 24 04                     		MOV		EAX,[ESP+4]
   119 00000077 0F 22 C0                        		MOV		CR0,EAX
   120 0000007A C3                              		RET
   121 0000007B                                 
   122 0000007B                                 _load_tr:		; void load_tr(int tr);
   123 0000007B 0F 00 5C 24 04                  		LTR		[ESP+4]			; tr
   124 00000080 C3                              		RET
   125 00000081                                 
   126 00000081                                 
   127 00000081                                 _memtest_sub:	; unsigned int memtest_sub(unsigned int start, unsigned int end)
   128 00000081 57                              		PUSH	EDI						; �iEBX, ESI, EDI ��g�������̂Łj
   129 00000082 56                              		PUSH	ESI
   130 00000083 53                              		PUSH	EBX
   131 00000084 BE AA55AA55                     		MOV		ESI,0xaa55aa55			; pat0 = 0xaa55aa55;
   132 00000089 BF 55AA55AA                     		MOV		EDI,0x55aa55aa			; pat1 = 0x55aa55aa;
   133 0000008E 8B 44 24 10                     		MOV		EAX,[ESP+12+4]			; i = start;
   134 00000092                                 		
   135 00000092                                 mts_loop:
   136 00000092 89 C3                           		MOV		EBX,EAX
   137 00000094 81 C3 00000FFC                  		ADD		EBX,0xffc				; p = i + 0xffc;
   138 0000009A 8B 13                           		MOV		EDX,[EBX]				; old = *p;
   139 0000009C 89 33                           		MOV		[EBX],ESI				; *p = pat0;
   140 0000009E 83 33 FF                        		XOR		DWORD [EBX],0xffffffff	; *p ^= 0xffffffff;
   141 000000A1 3B 3B                           		CMP		EDI,[EBX]				; if (*p != pat1) goto fin;
   142 000000A3 75 18                           		JNE		mts_fin
   143 000000A5 83 33 FF                        		XOR		DWORD [EBX],0xffffffff	; *p ^= 0xffffffff;
   144 000000A8 3B 33                           		CMP		ESI,[EBX]				; if (*p != pat0) goto fin;
   145 000000AA 75 11                           		JNE		mts_fin
   146 000000AC 89 13                           		MOV		[EBX],EDX				; *p = old;
   147 000000AE 05 00001000                     		ADD		EAX,0x1000				; i += 0x1000;
   148 000000B3 3B 44 24 14                     		CMP		EAX,[ESP+12+8]			; if (i <= end) goto mts_loop;
   149 000000B7 76 D9                           		JBE		mts_loop
   150 000000B9 5B                              		POP		EBX
   151 000000BA 5E                              		POP		ESI
   152 000000BB 5F                              		POP		EDI
   153 000000BC C3                              		RET
   154 000000BD                                 mts_fin:
   155 000000BD 89 13                           		MOV		[EBX],EDX				; *p = old;
   156 000000BF 5B                              		POP		EBX
   157 000000C0 5E                              		POP		ESI
   158 000000C1 5F                              		POP		EDI
   159 000000C2 C3                              		RET
   160 000000C3                                 		
   161 000000C3                                 _farjmp:		; void farjmp(int eip, int cs);
   162 000000C3 FF 6C 24 04                     		JMP		FAR	[ESP+4]				; eip, cs
   163 000000C7 C3                              		RET
   164 000000C8                                 
   165 000000C8                                 
   166 000000C8                                 _farcall:		; void farcall(int eip, int cs);
   167 000000C8 FF 5C 24 04                     		CALL	FAR	[ESP+4]				; eip, cs
   168 000000CC C3                              		RET
   169 000000CD                                 
   170 000000CD                                 ;EXTERN
   171 000000CD                                 
   172 000000CD                                 _asm_inthandler0c:
   173 000000CD FB                              		STI
   174 000000CE 06                              		PUSH	ES
   175 000000CF 1E                              		PUSH	DS
   176 000000D0 60                              		PUSHAD
   177 000000D1 89 E0                           		MOV		EAX,ESP
   178 000000D3 50                              		PUSH	EAX
   179 000000D4 66 8C D0                        		MOV		AX,SS
   180 000000D7 8E D8                           		MOV		DS,AX
   181 000000D9 8E C0                           		MOV		ES,AX
   182 000000DB E8 [00000000]                   		CALL	_inthandler0c
   183 000000E0 83 F8 00                        		CMP		EAX,0
   184 000000E3 0F 85 000000BB                  		JNE		_asm_end_app
   185 000000E9 58                              		POP		EAX
   186 000000EA 61                              		POPAD
   187 000000EB 1F                              		POP		DS
   188 000000EC 07                              		POP		ES
   189 000000ED 83 C4 04                        		ADD		ESP,4			;int 0x0c中需要这个
   190 000000F0 CF                              		IRETD
   191 000000F1                                 
   192 000000F1                                 _asm_inthandler20:
   193 000000F1 06                              		PUSH	ES
   194 000000F2 1E                              		PUSH	DS
   195 000000F3 60                              		PUSHAD
   196 000000F4 89 E0                           		MOV		EAX,ESP
   197 000000F6 50                              		PUSH	EAX
   198 000000F7 66 8C D0                        		MOV		AX,SS
   199 000000FA 8E D8                           		MOV		DS,AX
   200 000000FC 8E C0                           		MOV		ES,AX
   201 000000FE E8 [00000000]                   		CALL	_inthandler20
   202 00000103 58                              		POP		EAX
   203 00000104 61                              		POPAD
   204 00000105 1F                              		POP		DS
   205 00000106 07                              		POP		ES
   206 00000107 CF                              		IRETD
   207 00000108                                 
   208 00000108                                 _asm_inthandler21:
   209 00000108 06                              		PUSH	ES
   210 00000109 1E                              		PUSH	DS
   211 0000010A 60                              		PUSHAD
   212 0000010B 89 E0                           		MOV		EAX,ESP
   213 0000010D 50                              		PUSH	EAX
   214 0000010E 66 8C D0                        		MOV		AX,SS
   215 00000111 8E D8                           		MOV		DS,AX
   216 00000113 8E C0                           		MOV		ES,AX
   217 00000115 E8 [00000000]                   		CALL	_inthandler21
   218 0000011A 58                              		POP		EAX
   219 0000011B 61                              		POPAD
   220 0000011C 1F                              		POP		DS
   221 0000011D 07                              		POP		ES
   222 0000011E CF                              		IRETD
   223 0000011F                                 
   224 0000011F                                 _asm_inthandler27:
   225 0000011F 06                              		PUSH	ES
   226 00000120 1E                              		PUSH	DS
   227 00000121 60                              		PUSHAD
   228 00000122 89 E0                           		MOV		EAX,ESP
   229 00000124 50                              		PUSH	EAX
   230 00000125 66 8C D0                        		MOV		AX,SS
   231 00000128 8E D8                           		MOV		DS,AX
   232 0000012A 8E C0                           		MOV		ES,AX
   233 0000012C E8 [00000000]                   		CALL	_inthandler27
   234 00000131 58                              		POP		EAX
   235 00000132 61                              		POPAD
   236 00000133 1F                              		POP		DS
   237 00000134 07                              		POP		ES
   238 00000135 CF                              		IRETD
   239 00000136                                 
   240 00000136                                 _asm_inthandler2c:
   241 00000136 06                              		PUSH	ES
   242 00000137 1E                              		PUSH	DS
   243 00000138 60                              		PUSHAD
   244 00000139 89 E0                           		MOV		EAX,ESP
   245 0000013B 50                              		PUSH	EAX
   246 0000013C 66 8C D0                        		MOV		AX,SS
   247 0000013F 8E D8                           		MOV		DS,AX
   248 00000141 8E C0                           		MOV		ES,AX
   249 00000143 E8 [00000000]                   		CALL	_inthandler2c
   250 00000148 58                              		POP		EAX
   251 00000149 61                              		POPAD
   252 0000014A 1F                              		POP		DS
   253 0000014B 07                              		POP		ES
   254 0000014C CF                              		IRETD
   255 0000014D                                 
   256 0000014D                                 
   257 0000014D                                 _asm_inthandler0d:
   258 0000014D FB                              		STI
   259 0000014E 06                              		PUSH	ES
   260 0000014F 1E                              		PUSH	DS
   261 00000150 60                              		PUSHAD
   262 00000151 89 E0                           		MOV		EAX,ESP
   263 00000153 50                              		PUSH	EAX
   264 00000154 66 8C D0                        		MOV		AX,SS
   265 00000157 8E D8                           		MOV		DS,AX
   266 00000159 8E C0                           		MOV		ES,AX
   267 0000015B E8 [00000000]                   		CALL	_inthandler0d
   268 00000160 83 F8 00                        		CMP		EAX,0		
   269 00000163 75 3F                           		JNE		_asm_end_app	
   270 00000165 58                              		POP		EAX
   271 00000166 61                              		POPAD
   272 00000167 1F                              		POP		DS
   273 00000168 07                              		POP		ES
   274 00000169 83 C4 04                        		ADD		ESP,4			; INT 0x0d �ł́A���ꂪ�K�v
   275 0000016C CF                              		IRETD
   276 0000016D                                 
   277 0000016D                                 _asm_cons_putchar:
   278 0000016D FB                              		STI
   279 0000016E 60                              		PUSHAD
   280 0000016F 6A 01                           		PUSH	1
   281 00000171 25 000000FF                     		AND		EAX,0xff	
   282 00000176 50                              		PUSH	EAX
   283 00000177 FF 35 00000FEC                  		PUSH	DWORD [0x0fec]	;读取内存push值
   284 0000017D E8 [00000000]                   		CALL	_cons_putchar
   285 00000182 83 C4 0C                        		ADD		ESP,12		;栈中的数据丢弃
   286 00000185 61                              		POPAD
   287 00000186 CF                              		IRETD
   288 00000187                                 
   289 00000187                                 _asm_hrb_api:
   290 00000187 FB                              		STI
   291 00000188 1E                              		PUSH	DS
   292 00000189 06                              		PUSH	ES
   293 0000018A 60                              		PUSHAD		
   294 0000018B 60                              		PUSHAD		; 向hrn_api传递用
   295 0000018C 66 8C D0                        		MOV		AX,SS
   296 0000018F 8E D8                           		MOV		DS,AX		
   297 00000191 8E C0                           		MOV		ES,AX
   298 00000193 E8 [00000000]                   		CALL	_hrb_api
   299 00000198 83 F8 00                        		CMP		EAX,0		
   300 0000019B 75 07                           		JNE		_asm_end_app
   301 0000019D 83 C4 20                        		ADD		ESP,32
   302 000001A0 61                              		POPAD
   303 000001A1 07                              		POP		ES
   304 000001A2 1F                              		POP		DS
   305 000001A3 CF                              		IRETD
   306 000001A4                                 
   307 000001A4                                 _asm_end_app:
   308 000001A4 8B 20                           		MOV		ESP,[EAX]
   309 000001A6 C7 40 04 00000000               		MOV		DWORD [EAX+4],0
   310 000001AD 61                              		POPAD
   311 000001AE C3                              		RET					; cmd_app�֋A��
   312 000001AF                                 
   313 000001AF                                 _start_app:		; void start_app(int eip, int cs, int esp, int ds, int *tss_esp0);
   314 000001AF 60                              		PUSHAD		
   315 000001B0 8B 44 24 24                     		MOV		EAX,[ESP+36]	; EIP
   316 000001B4 8B 4C 24 28                     		MOV		ECX,[ESP+40]	; CS
   317 000001B8 8B 54 24 2C                     		MOV		EDX,[ESP+44]	; ESP
   318 000001BC 8B 5C 24 30                     		MOV		EBX,[ESP+48]	; DS/SS
   319 000001C0 8B 6C 24 34                     		MOV		EBP,[ESP+52]	; tss.esp
   320 000001C4 89 65 00                        		MOV		[EBP],ESP		; 操作系统用的ESP
   321 000001C7 8C 55 04                        		MOV		[EBP+4],SS		; 保存系统的ss
   322 000001CA 8E C3                           		MOV		ES,BX
   323 000001CC 8E DB                           		MOV		DS,BX
   324 000001CE 8E E3                           		MOV		FS,BX
   325 000001D0 8E EB                           		MOV		GS,BX
   326 000001D2                                 ;	下面是调整栈，以免用retf跳转到应用程序
   327 000001D2 83 C9 03                        		OR		ECX,3			
   328 000001D5 83 CB 03                        		OR		EBX,3			
   329 000001D8 53                              		PUSH	EBX				
   330 000001D9 52                              		PUSH	EDX				
   331 000001DA 51                              		PUSH	ECX				
   332 000001DB 50                              		PUSH	EAX				
   333 000001DC CB                              		RETF
   334 000001DD                                 
   335 000001DD                                 
   336 000001DD                                 
