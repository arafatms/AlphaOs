[FORMAT "WCOFF"]
[INSTRSET "i486p"]
[OPTIMIZE 1]
[OPTION 1]
[BITS 32]
	EXTERN	_memman_alloc_4K
	EXTERN	_strcpy
	EXTERN	_strncmp
	EXTERN	_memman_total
	EXTERN	_mem_total
	EXTERN	_sprintf
	EXTERN	_sheet_refresh
	EXTERN	_file_search
	EXTERN	_memman
	EXTERN	_file_readfat
	EXTERN	_file_loadfile
	EXTERN	_memman_free_4K
	EXTERN	_set_segmdesc
	EXTERN	_farcall
	EXTERN	_putfonts8_asc_sht
	EXTERN	_task_now
	EXTERN	_fifo32_init
	EXTERN	_timer_alloc
	EXTERN	_timer_init
	EXTERN	_timer_settime
	EXTERN	_io_cli
	EXTERN	_fifo32_status
	EXTERN	_fifo32_get
	EXTERN	_io_sti
	EXTERN	_boxfill8
	EXTERN	_task_sleep
	EXTERN	_start_app
	EXTERN	_sheet_free
	EXTERN	_memman_free
	EXTERN	_memman_alloc
	EXTERN	_memman_init
	EXTERN	_putfonts8_asc
	EXTERN	_sheet_alloc
	EXTERN	_sheet_setbuf
	EXTERN	_make_window8
	EXTERN	_sheet_slide
	EXTERN	_sheet_updown
[FILE "command.c"]
[SECTION .data]
LC0:
	DB	"mem",0x00
LC1:
	DB	"clear",0x00
LC2:
	DB	"ls",0x00
LC3:
	DB	"cat",0x00
[SECTION .text]
	GLOBAL	_Command_int
_Command_int:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	484
	PUSH	DWORD [8+EBP]
	CALL	_memman_alloc_4K
	MOV	DWORD [_command_list],EAX
	MOV	DWORD [EAX],0
	PUSH	_Command_mem
	PUSH	LC0
	CALL	_add_command
	PUSH	_Command_clear
	PUSH	LC1
	CALL	_add_command
	PUSH	_Command_ls
	PUSH	LC2
	CALL	_add_command
	ADD	ESP,32
	PUSH	_Command_cat
	PUSH	LC3
	CALL	_add_command
	LEAVE
	RET
	GLOBAL	_add_command
_add_command:
	PUSH	EBP
	MOV	EAX,DWORD [_command_list]
	MOV	EBP,ESP
	PUSH	DWORD [8+EBP]
	IMUL	EDX,DWORD [EAX],20
	LEA	EAX,DWORD [4+EDX+EAX*1]
	PUSH	EAX
	CALL	_strcpy
	MOV	EDX,DWORD [12+EBP]
	MOV	ECX,DWORD [_command_list]
	MOV	EAX,DWORD [ECX]
	MOV	DWORD [404+ECX+EAX*4],EDX
	INC	EAX
	MOV	DWORD [ECX],EAX
	LEAVE
	RET
	GLOBAL	_Find_Command
_Find_Command:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	XOR	EDI,EDI
	MOV	EAX,DWORD [8+EBP]
	PUSH	EBX
	CMP	BYTE [EAX],32
	JE	L15
L7:
	INC	EDI
	MOV	EAX,DWORD [8+EBP]
	CMP	BYTE [EDI+EAX*1],32
	JNE	L7
L15:
	MOV	EAX,DWORD [_command_list]
	XOR	EBX,EBX
	CMP	EBX,DWORD [EAX]
	JGE	L17
	XOR	ESI,ESI
L13:
	PUSH	EDI
	LEA	EAX,DWORD [4+ESI+EAX*1]
	PUSH	EAX
	PUSH	DWORD [8+EBP]
	CALL	_strncmp
	ADD	ESP,12
	TEST	EAX,EAX
	JE	L18
	MOV	EAX,DWORD [_command_list]
	INC	EBX
	ADD	ESI,20
	CMP	EBX,DWORD [EAX]
	JL	L13
L17:
	XOR	EAX,EAX
L3:
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L18:
	MOV	EAX,DWORD [_command_list]
	MOV	EAX,DWORD [404+EAX+EBX*4]
	JMP	L3
[SECTION .data]
LC4:
	DB	"total   %dMB",0x0A,"free %dKB",0x0A,0x0A,0x00
[SECTION .text]
	GLOBAL	_Command_mem
_Command_mem:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EBX
	SUB	ESP,64
	LEA	EBX,DWORD [-68+EBP]
	PUSH	3932160
	CALL	_memman_total
	SHR	EAX,10
	MOV	DWORD [ESP],EAX
	MOV	EAX,DWORD [_mem_total]
	SHR	EAX,20
	PUSH	EAX
	PUSH	LC4
	PUSH	EBX
	CALL	_sprintf
	PUSH	EBX
	PUSH	DWORD [8+EBP]
	CALL	_cons_putstr
	MOV	EBX,DWORD [-4+EBP]
	LEAVE
	RET
	GLOBAL	_Command_clear
_Command_clear:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	MOV	ESI,28
	MOV	EDI,DWORD [8+EBP]
	PUSH	EBX
	MOV	ECX,DWORD [EDI]
	MOV	EAX,DWORD [12+ECX]
	SUB	EAX,10
	CMP	ESI,EAX
	JGE	L32
L30:
	MOV	EDX,DWORD [8+ECX]
	MOV	EBX,8
	LEA	EAX,DWORD [-10+EDX]
	CMP	EBX,EAX
	JGE	L34
L29:
	MOV	EAX,ESI
	IMUL	EAX,EDX
	MOV	EDX,DWORD [ECX]
	LEA	EAX,DWORD [EAX+EBX*1]
	INC	EBX
	MOV	BYTE [EAX+EDX*1],19
	MOV	EDX,DWORD [8+ECX]
	LEA	EAX,DWORD [-10+EDX]
	CMP	EBX,EAX
	JL	L29
L34:
	MOV	EAX,DWORD [12+ECX]
	INC	ESI
	SUB	EAX,10
	CMP	ESI,EAX
	JL	L30
L32:
	MOV	EAX,DWORD [8+ECX]
	SUB	EAX,10
	PUSH	EAX
	MOV	EAX,DWORD [12+ECX]
	SUB	EAX,10
	PUSH	EAX
	PUSH	28
	PUSH	8
	PUSH	ECX
	PUSH	DWORD [4+ECX]
	CALL	_sheet_refresh
	MOV	DWORD [8+EDI],28
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
[SECTION .data]
LC5:
	DB	"filename.ext   %7d",0x0A,0x00
[SECTION .text]
	GLOBAL	_Command_ls
_Command_ls:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	XOR	ESI,ESI
	PUSH	EBX
	XOR	EBX,EBX
	SUB	ESP,48
	MOV	EDI,DWORD [8+EBP]
L48:
	MOV	AL,BYTE [1058304+EBX]
	TEST	AL,AL
	JE	L37
	CMP	AL,-27
	JE	L38
	TEST	BYTE [1058315+EBX],24
	JE	L52
L38:
	INC	ESI
	ADD	EBX,32
	CMP	ESI,223
	JLE	L48
L37:
	PUSH	EDI
	CALL	_cons_newline
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L52:
	PUSH	DWORD [1058332+EBX]
	PUSH	LC5
	LEA	EAX,DWORD [-60+EBP]
	PUSH	EAX
	CALL	_sprintf
	LEA	EDX,DWORD [1058304+EBX]
	XOR	ECX,ECX
	ADD	ESP,12
L47:
	MOV	AL,BYTE [EDX]
	INC	EDX
	MOV	BYTE [-60+EBP+ECX*1],AL
	INC	ECX
	CMP	ECX,7
	JLE	L47
	MOV	AL,BYTE [1058312+EBX]
	MOV	BYTE [-51+EBP],AL
	MOV	AL,BYTE [1058313+EBX]
	MOV	BYTE [-50+EBP],AL
	MOV	AL,BYTE [1058314+EBX]
	MOV	BYTE [-49+EBP],AL
	LEA	EAX,DWORD [-60+EBP]
	PUSH	EAX
	PUSH	EDI
	CALL	_cons_putstr
	POP	EAX
	POP	EDX
	JMP	L38
[SECTION .data]
LC6:
	DB	"File not found.",0x0A,0x00
[SECTION .text]
	GLOBAL	_Command_cat
_Command_cat:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	PUSH	EDI
	MOV	EAX,DWORD [8+EBP]
	MOV	DWORD [-16+EBP],EAX
	PUSH	224
	PUSH	1058304
	MOV	EAX,DWORD [12+EBP]
	ADD	EAX,4
	PUSH	EAX
	CALL	_file_search
	PUSH	11520
	PUSH	DWORD [_memman]
	MOV	ESI,EAX
	CALL	_memman_alloc_4K
	PUSH	1049088
	MOV	EDI,EAX
	PUSH	EAX
	CALL	_file_readfat
	ADD	ESP,28
	TEST	ESI,ESI
	JE	L54
	PUSH	DWORD [28+ESI]
	PUSH	DWORD [_memman]
	CALL	_memman_alloc_4K
	PUSH	1064448
	PUSH	EDI
	MOV	EBX,EAX
	PUSH	EAX
	PUSH	DWORD [28+ESI]
	MOVZX	EAX,WORD [26+ESI]
	PUSH	EAX
	CALL	_file_loadfile
	PUSH	DWORD [28+ESI]
	PUSH	EBX
	PUSH	DWORD [-16+EBP]
	CALL	_cons_putnstr
	ADD	ESP,40
	PUSH	DWORD [28+ESI]
	PUSH	EBX
	PUSH	DWORD [_memman]
	CALL	_memman_free_4K
	ADD	ESP,12
L55:
	PUSH	DWORD [-16+EBP]
	CALL	_cons_newline
	MOV	EAX,DWORD [-16+EBP]
	POP	ECX
	MOV	DWORD [8+EBP],EAX
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	JMP	_cons_newline
L54:
	PUSH	LC6
	PUSH	DWORD [-16+EBP]
	CALL	_cons_putstr
	POP	EBX
	POP	ESI
	JMP	L55
[SECTION .data]
LC7:
	DB	"HLT.EXE",0x00
LC8:
	DB	"File not found.",0x00
[SECTION .text]
	GLOBAL	_cmd_hlt
_cmd_hlt:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	PUSH	EAX
	MOV	EDI,DWORD [8+EBP]
	PUSH	224
	PUSH	1058304
	PUSH	LC7
	CALL	_file_search
	PUSH	11520
	PUSH	3932160
	MOV	ESI,EAX
	CALL	_memman_alloc_4K
	MOV	DWORD [-16+EBP],EAX
	PUSH	1049088
	PUSH	EAX
	CALL	_file_readfat
	ADD	ESP,28
	TEST	ESI,ESI
	JE	L57
	PUSH	DWORD [28+ESI]
	PUSH	3932160
	CALL	_memman_alloc_4K
	PUSH	1064448
	PUSH	DWORD [-16+EBP]
	PUSH	EAX
	MOV	EBX,EAX
	PUSH	DWORD [28+ESI]
	MOVZX	EAX,WORD [26+ESI]
	PUSH	EAX
	CALL	_file_loadfile
	PUSH	16538
	PUSH	EBX
	MOV	EAX,DWORD [28+ESI]
	DEC	EAX
	PUSH	EAX
	PUSH	2563928
	CALL	_set_segmdesc
	ADD	ESP,44
	PUSH	8024
	PUSH	0
	CALL	_farcall
	PUSH	DWORD [28+ESI]
	PUSH	EBX
	PUSH	3932160
	CALL	_memman_free_4K
	ADD	ESP,20
L58:
	PUSH	11520
	PUSH	DWORD [-16+EBP]
	PUSH	3932160
	CALL	_memman_free_4K
	MOV	DWORD [8+EBP],EDI
	ADD	ESP,12
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	JMP	_cons_newline
L57:
	PUSH	15
	PUSH	LC8
	PUSH	7
	PUSH	14
	PUSH	DWORD [8+EDI]
	PUSH	8
	PUSH	DWORD [EDI]
	MOV	EAX,DWORD [EDI]
	PUSH	DWORD [4+EAX]
	CALL	_putfonts8_asc_sht
	ADD	ESP,32
	PUSH	EDI
	CALL	_cons_newline
	POP	EAX
	JMP	L58
[SECTION .data]
LC9:
	DB	"User:$",0x00
LC10:
	DB	"Bad Command.",0x0A,0x0A,0x00
[SECTION .text]
	GLOBAL	_console_task
_console_task:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	SUB	ESP,612
	CALL	_task_now
	MOV	EDI,EAX
	PUSH	EAX
	LEA	EAX,DWORD [-524+EBP]
	PUSH	EAX
	PUSH	128
	PUSH	DWORD [120+EDI]
	CALL	_fifo32_init
	PUSH	11520
	PUSH	DWORD [_memman]
	CALL	_memman_alloc_4K
	PUSH	1049088
	PUSH	EAX
	MOV	DWORD [-624+EBP],EAX
	CALL	_file_readfat
	ADD	ESP,32
	MOV	EAX,DWORD [8+EBP]
	MOV	DWORD [-620+EBP],EAX
	LEA	EAX,DWORD [-620+EBP]
	MOV	DWORD [-616+EBP],65
	MOV	DWORD [-612+EBP],28
	MOV	DWORD [-608+EBP],-1
	MOV	DWORD [4076],EAX
	CALL	_timer_alloc
	PUSH	1
	PUSH	DWORD [120+EDI]
	PUSH	EAX
	MOV	DWORD [-604+EBP],EAX
	CALL	_timer_init
	PUSH	50
	PUSH	DWORD [-604+EBP]
	CALL	_timer_settime
	MOV	EDX,DWORD [8+EBP]
	PUSH	6
	PUSH	LC9
	PUSH	19
	PUSH	0
	PUSH	28
	PUSH	8
	PUSH	DWORD [8+EBP]
	PUSH	DWORD [4+EDX]
	CALL	_putfonts8_asc_sht
	ADD	ESP,52
L60:
	CALL	_io_cli
	PUSH	DWORD [120+EDI]
	CALL	_fifo32_status
	POP	EDX
	TEST	EAX,EAX
	JE	L85
	PUSH	DWORD [120+EDI]
	CALL	_fifo32_get
	MOV	EBX,EAX
	CALL	_io_sti
	POP	EAX
	CMP	EBX,1
	JLE	L86
L65:
	CMP	EBX,2
	JE	L87
L70:
	CMP	EBX,3
	JE	L88
L71:
	LEA	ECX,DWORD [-256+EBX]
	CMP	ECX,255
	JA	L72
	CMP	EBX,264
	JE	L89
	CMP	EBX,266
	JE	L90
	MOV	EDX,DWORD [8+EBP]
	MOV	EAX,DWORD [8+EDX]
	MOV	EDX,DWORD [-616+EBP]
	SUB	EAX,16
	CMP	EDX,EAX
	JGE	L72
	LEA	EAX,DWORD [-65+EDX]
	PUSH	1
	MOV	EDX,8
	PUSH	ECX
	MOV	ESI,EDX
	CDQ
	IDIV	ESI
	MOV	BYTE [-588+EBP+EAX*1],BL
	LEA	EAX,DWORD [-620+EBP]
	PUSH	EAX
	CALL	_cons_putchar
L84:
	ADD	ESP,12
L72:
	CMP	DWORD [-608+EBP],0
	JS	L82
	MOV	ECX,DWORD [-612+EBP]
	MOV	EDX,DWORD [-616+EBP]
	LEA	EAX,DWORD [15+ECX]
	PUSH	EAX
	LEA	EAX,DWORD [7+EDX]
	PUSH	EAX
	PUSH	ECX
	PUSH	EDX
	MOVZX	EAX,BYTE [-608+EBP]
	PUSH	EAX
	MOV	EAX,DWORD [8+EBP]
	PUSH	DWORD [8+EAX]
	PUSH	DWORD [EAX]
	CALL	_boxfill8
	ADD	ESP,28
L82:
	MOV	ECX,DWORD [-612+EBP]
	MOV	EDX,DWORD [-616+EBP]
	LEA	EAX,DWORD [16+ECX]
	PUSH	EAX
	LEA	EAX,DWORD [8+EDX]
	PUSH	EAX
	PUSH	ECX
	PUSH	EDX
	MOV	EDX,DWORD [8+EBP]
	PUSH	DWORD [8+EBP]
	PUSH	DWORD [4+EDX]
	CALL	_sheet_refresh
	ADD	ESP,24
	JMP	L60
L90:
	PUSH	0
	LEA	ESI,DWORD [-620+EBP]
	PUSH	32
	LEA	EBX,DWORD [-588+EBP]
	PUSH	ESI
	CALL	_cons_putchar
	PUSH	ESI
	MOV	EAX,DWORD [-616+EBP]
	MOV	EDX,8
	SUB	EAX,65
	MOV	ECX,EDX
	CDQ
	IDIV	ECX
	MOV	BYTE [-588+EBP+EAX*1],0
	CALL	_cons_newline
	PUSH	EBX
	CALL	_Find_Command
	ADD	ESP,20
	TEST	EAX,EAX
	JE	L77
	PUSH	EBX
	PUSH	ESI
	CALL	EAX
L83:
	POP	EAX
	POP	EDX
L78:
	PUSH	6
	MOV	ESI,DWORD [8+EBP]
	PUSH	LC9
	PUSH	19
	PUSH	0
	PUSH	DWORD [-612+EBP]
	PUSH	8
	PUSH	DWORD [8+EBP]
	PUSH	DWORD [4+ESI]
	CALL	_putfonts8_asc_sht
	ADD	ESP,32
	MOV	DWORD [-616+EBP],65
	JMP	L72
L77:
	PUSH	EBX
	PUSH	DWORD [-624+EBP]
	PUSH	ESI
	CALL	_cmd_app
	ADD	ESP,12
	TEST	EAX,EAX
	JNE	L78
	PUSH	LC10
	PUSH	ESI
	CALL	_cons_putstr
	JMP	L83
L89:
	CMP	DWORD [-616+EBP],65
	JLE	L72
	PUSH	0
	LEA	EAX,DWORD [-620+EBP]
	PUSH	32
	PUSH	EAX
	CALL	_cons_putchar
	SUB	DWORD [-616+EBP],8
	JMP	L84
L88:
	MOV	EDX,DWORD [-616+EBP]
	PUSH	43
	MOV	ECX,DWORD [8+EBP]
	LEA	EAX,DWORD [7+EDX]
	PUSH	EAX
	PUSH	28
	PUSH	EDX
	PUSH	19
	PUSH	DWORD [8+ECX]
	PUSH	DWORD [ECX]
	CALL	_boxfill8
	ADD	ESP,28
	MOV	DWORD [-608+EBP],-1
	JMP	L71
L87:
	MOV	DWORD [-608+EBP],0
	JMP	L70
L86:
	TEST	EBX,EBX
	JE	L66
	PUSH	0
	PUSH	DWORD [120+EDI]
	PUSH	DWORD [-604+EBP]
	CALL	_timer_init
	ADD	ESP,12
	CMP	DWORD [-608+EBP],0
	JS	L68
	MOV	DWORD [-608+EBP],0
L68:
	PUSH	50
	PUSH	DWORD [-604+EBP]
	CALL	_timer_settime
	POP	ECX
	POP	ESI
	JMP	L65
L66:
	PUSH	1
	PUSH	DWORD [120+EDI]
	PUSH	DWORD [-604+EBP]
	CALL	_timer_init
	ADD	ESP,12
	CMP	DWORD [-608+EBP],0
	JS	L68
	MOV	DWORD [-608+EBP],19
	JMP	L68
L85:
	PUSH	EDI
	CALL	_task_sleep
	CALL	_io_sti
	POP	EAX
	JMP	L60
	GLOBAL	_cons_newline
_cons_newline:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	PUSH	ECX
	MOV	EAX,DWORD [8+EBP]
	MOV	EBX,DWORD [8+EBP]
	MOV	ESI,DWORD [EAX]
	MOV	EDX,DWORD [8+EBX]
	MOV	ECX,DWORD [12+ESI]
	LEA	EAX,DWORD [-38+ECX]
	CMP	EDX,EAX
	JGE	L92
	LEA	EAX,DWORD [20+EDX]
	MOV	DWORD [8+EBX],EAX
L93:
	MOV	EBX,DWORD [8+EBP]
	MOV	DWORD [4+EBX],8
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L92:
	MOV	DWORD [-16+EBP],28
	LEA	EAX,DWORD [-28+ECX]
	CMP	DWORD [-16+EBP],EAX
	JGE	L115
L103:
	MOV	EDI,8
	MOV	EBX,DWORD [8+ESI]
	CMP	EDI,EBX
	JGE	L117
L102:
	MOV	EAX,DWORD [-16+EBP]
	MOV	EDX,DWORD [-16+EBP]
	ADD	EAX,20
	MOV	ECX,DWORD [ESI]
	IMUL	EAX,EBX
	IMUL	EDX,EBX
	LEA	EAX,DWORD [EAX+EDI*1]
	LEA	EDX,DWORD [EDX+EDI*1]
	INC	EDI
	MOV	AL,BYTE [EAX+ECX*1]
	MOV	BYTE [EDX+ECX*1],AL
	MOV	EBX,DWORD [8+ESI]
	CMP	EDI,EBX
	JL	L102
L117:
	MOV	EAX,DWORD [12+ESI]
	INC	DWORD [-16+EBP]
	SUB	EAX,28
	CMP	DWORD [-16+EBP],EAX
	JL	L103
L115:
	MOV	EAX,DWORD [12+ESI]
	LEA	EDX,DWORD [-28+EAX]
	SUB	EAX,8
	MOV	DWORD [-16+EBP],EDX
	CMP	EDX,EAX
	JGE	L119
L113:
	MOV	EDI,8
	MOV	EAX,DWORD [8+ESI]
	CMP	EDI,EAX
	JGE	L121
L112:
	IMUL	EAX,DWORD [-16+EBP]
	MOV	EDX,DWORD [ESI]
	LEA	EAX,DWORD [EAX+EDI*1]
	INC	EDI
	MOV	BYTE [EAX+EDX*1],19
	MOV	EAX,DWORD [8+ESI]
	CMP	EDI,EAX
	JL	L112
L121:
	MOV	EAX,DWORD [12+ESI]
	INC	DWORD [-16+EBP]
	SUB	EAX,8
	CMP	DWORD [-16+EBP],EAX
	JL	L113
L119:
	PUSH	DWORD [12+ESI]
	PUSH	DWORD [8+ESI]
	PUSH	28
	PUSH	8
	PUSH	ESI
	PUSH	DWORD [4+ESI]
	CALL	_sheet_refresh
	ADD	ESP,24
	JMP	L93
[SECTION .data]
LC11:
	DB	" ",0x00
[SECTION .text]
	GLOBAL	_cons_putchar
_cons_putchar:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EBX
	PUSH	EAX
	MOV	EAX,DWORD [12+EBP]
	MOV	DL,BYTE [16+EBP]
	MOV	EBX,DWORD [8+EBP]
	MOV	BYTE [-7+EBP],DL
	MOV	BYTE [-6+EBP],AL
	CMP	AL,9
	MOV	BYTE [-5+EBP],0
	JE	L124
	CMP	AL,10
	JE	L136
	CMP	AL,13
	JE	L122
	PUSH	1
	LEA	EAX,DWORD [-6+EBP]
	PUSH	EAX
	PUSH	19
	PUSH	0
	PUSH	DWORD [8+EBX]
	PUSH	DWORD [4+EBX]
	PUSH	DWORD [EBX]
	MOV	EAX,DWORD [EBX]
	PUSH	DWORD [4+EAX]
	CALL	_putfonts8_asc_sht
	ADD	ESP,32
	CMP	BYTE [-7+EBP],0
	JE	L122
	MOV	EAX,DWORD [4+EBX]
	MOV	EDX,DWORD [EBX]
	ADD	EAX,8
	MOV	DWORD [4+EBX],EAX
	MOV	EDX,DWORD [8+EDX]
	SUB	EDX,10
	CMP	EAX,EDX
	JGE	L136
L122:
	MOV	EBX,DWORD [-4+EBP]
	LEAVE
	RET
L136:
	PUSH	EBX
	CALL	_cons_newline
	POP	EBX
	JMP	L122
L124:
	PUSH	1
	PUSH	LC11
	PUSH	19
	PUSH	0
	PUSH	DWORD [8+EBX]
	PUSH	DWORD [4+EBX]
	PUSH	DWORD [EBX]
	MOV	EAX,DWORD [EBX]
	PUSH	DWORD [4+EAX]
	CALL	_putfonts8_asc_sht
	ADD	ESP,32
	MOV	EDX,DWORD [4+EBX]
	MOV	EAX,DWORD [EBX]
	ADD	EDX,8
	MOV	DWORD [4+EBX],EDX
	MOV	EAX,DWORD [8+EAX]
	SUB	EAX,10
	CMP	EDX,EAX
	JGE	L137
L127:
	MOV	EAX,DWORD [4+EBX]
	SUB	EAX,8
	AND	EAX,31
	JNE	L124
	JMP	L122
L137:
	PUSH	EBX
	CALL	_cons_newline
	POP	EAX
	JMP	L127
	GLOBAL	_cons_putstr
_cons_putstr:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	MOV	EBX,DWORD [12+EBP]
	MOV	ESI,DWORD [8+EBP]
	CMP	BYTE [EBX],0
	JNE	L143
L145:
	LEA	ESP,DWORD [-8+EBP]
	POP	EBX
	POP	ESI
	POP	EBP
	RET
L143:
	PUSH	1
	MOVSX	EAX,BYTE [EBX]
	PUSH	EAX
	INC	EBX
	PUSH	ESI
	CALL	_cons_putchar
	ADD	ESP,12
	CMP	BYTE [EBX],0
	JNE	L143
	JMP	L145
	GLOBAL	_cons_putnstr
_cons_putnstr:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	MOV	ESI,DWORD [16+EBP]
	XOR	EBX,EBX
	MOV	EDI,DWORD [12+EBP]
	CMP	EBX,ESI
	JL	L151
L153:
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L151:
	PUSH	1
	MOVSX	EAX,BYTE [EBX+EDI*1]
	PUSH	EAX
	INC	EBX
	PUSH	DWORD [8+EBP]
	CALL	_cons_putchar
	ADD	ESP,12
	CMP	EBX,ESI
	JL	L151
	JMP	L153
[SECTION .data]
LC12:
	DB	"Hari",0x00
LC13:
	DB	".hrb file format error.",0x0A,0x00
[SECTION .text]
	GLOBAL	_cmd_app
_cmd_app:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	XOR	EBX,EBX
	SUB	ESP,60
	MOV	ESI,DWORD [16+EBP]
	CALL	_task_now
	MOV	DWORD [-56+EBP],EAX
L160:
	MOV	AL,BYTE [EBX+ESI*1]
	CMP	AL,32
	JLE	L156
	MOV	BYTE [-44+EBP+EBX*1],AL
	INC	EBX
	CMP	EBX,12
	JLE	L160
L156:
	PUSH	224
	LEA	ESI,DWORD [-44+EBP]
	PUSH	1058304
	PUSH	ESI
	MOV	BYTE [-44+EBP+EBX*1],0
	CALL	_file_search
	ADD	ESP,12
	TEST	EAX,EAX
	MOV	DWORD [-48+EBP],EAX
	JE	L182
L181:
	MOV	EAX,DWORD [-48+EBP]
	PUSH	DWORD [28+EAX]
	PUSH	3932160
	CALL	_memman_alloc_4K
	MOV	EDX,DWORD [-48+EBP]
	PUSH	1064448
	PUSH	DWORD [12+EBP]
	PUSH	EAX
	MOV	DWORD [-72+EBP],EAX
	PUSH	DWORD [28+EDX]
	MOVZX	EAX,WORD [26+EDX]
	PUSH	EAX
	CALL	_file_loadfile
	MOV	EDI,DWORD [-48+EBP]
	ADD	ESP,28
	CMP	DWORD [28+EDI],35
	JBE	L163
	MOV	ESI,DWORD [-72+EBP]
	MOV	EAX,LC12
	CLD
	ADD	ESI,4
	MOV	ECX,4
	MOV	EDI,EAX
	REPE
	CMPSB
	JNE	L163
	MOV	EAX,DWORD [-72+EBP]
	CMP	BYTE [EAX],0
	JE	L183
L163:
	PUSH	LC13
	PUSH	DWORD [8+EBP]
	CALL	_cons_putstr
	POP	EAX
	POP	EDX
L175:
	MOV	EDI,DWORD [-48+EBP]
	PUSH	DWORD [28+EDI]
	PUSH	DWORD [-72+EBP]
	PUSH	3932160
	CALL	_memman_free_4K
	PUSH	DWORD [8+EBP]
	CALL	_cons_newline
	MOV	EAX,1
L154:
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L183:
	MOV	EDX,DWORD [EAX]
	MOV	EDI,DWORD [12+EAX]
	MOV	EBX,DWORD [16+EAX]
	MOV	ESI,DWORD [20+EAX]
	PUSH	EDX
	MOV	DWORD [-60+EBP],EDX
	PUSH	3932160
	MOV	DWORD [-64+EBP],EDI
	CALL	_memman_alloc_4K
	MOV	EDX,DWORD [-48+EBP]
	MOV	DWORD [4072],EAX
	PUSH	16634
	PUSH	DWORD [-72+EBP]
	MOV	DWORD [-52+EBP],EAX
	MOV	EAX,DWORD [28+EDX]
	DEC	EAX
	PUSH	EAX
	PUSH	2563928
	CALL	_set_segmdesc
	MOV	EAX,DWORD [-60+EBP]
	PUSH	16626
	DEC	EAX
	PUSH	DWORD [-52+EBP]
	PUSH	EAX
	PUSH	2563936
	CALL	_set_segmdesc
	ADD	ESP,40
	TEST	EBX,EBX
	JLE	L178
	MOV	ECX,EDI
	MOV	EDI,DWORD [-72+EBP]
	ADD	ECX,DWORD [-52+EBP]
	LEA	EDX,DWORD [EDI+ESI*1]
L168:
	MOV	AL,BYTE [EDX]
	INC	EDX
	MOV	BYTE [ECX],AL
	INC	ECX
	DEC	EBX
	JNE	L168
L178:
	MOV	EAX,DWORD [-56+EBP]
	MOV	EBX,255
	ADD	EAX,20
	PUSH	EAX
	PUSH	8032
	PUSH	DWORD [-64+EBP]
	PUSH	8024
	PUSH	27
	CALL	_start_app
	ADD	ESP,20
	MOV	EAX,DWORD [4068]
	MOV	ESI,EAX
	MOV	DWORD [-68+EBP],EAX
	ADD	ESI,1044
L174:
	MOV	EDX,DWORD [-56+EBP]
	CMP	DWORD [36+ESI],EDX
	JE	L184
L171:
	ADD	ESI,40
	DEC	EBX
	JNS	L174
	PUSH	DWORD [-60+EBP]
	PUSH	DWORD [-52+EBP]
	PUSH	3932160
	CALL	_memman_free_4K
	ADD	ESP,12
	JMP	L175
L184:
	MOV	EAX,DWORD [32+ESI]
	AND	EAX,17
	CMP	EAX,17
	JNE	L171
	PUSH	ESI
	PUSH	DWORD [-68+EBP]
	CALL	_sheet_free
	POP	ECX
	POP	EDI
	JMP	L171
L182:
	CMP	BYTE [-45+EBP+EBX*1],46
	JE	L161
	PUSH	224
	PUSH	1058304
	PUSH	ESI
	MOV	BYTE [-44+EBP+EBX*1],46
	MOV	BYTE [-43+EBP+EBX*1],69
	MOV	BYTE [-42+EBP+EBX*1],88
	MOV	BYTE [-41+EBP+EBX*1],69
	MOV	BYTE [-40+EBP+EBX*1],0
	CALL	_file_search
	ADD	ESP,12
	MOV	DWORD [-48+EBP],EAX
L161:
	CMP	DWORD [-48+EBP],0
	JNE	L181
	XOR	EAX,EAX
	JMP	L154
	GLOBAL	_hrb_api
_hrb_api:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	SUB	ESP,12
	MOV	EBX,DWORD [28+EBP]
	MOV	EDI,DWORD [24+EBP]
	CALL	_task_now
	CMP	EBX,1
	MOV	EDX,DWORD [4072]
	MOV	ESI,DWORD [4076]
	MOV	DWORD [-16+EBP],EAX
	MOV	DWORD [-24+EBP],EDX
	MOV	EAX,DWORD [4068]
	MOV	DWORD [-20+EBP],EAX
	JE	L235
	CMP	EBX,2
	JE	L236
	CMP	EBX,3
	JE	L237
	CMP	EBX,4
	JE	L238
	CMP	EBX,5
	JE	L239
	CMP	EBX,6
	JE	L240
	CMP	EBX,7
	JE	L241
	CMP	EBX,8
	JE	L242
	CMP	EBX,9
	JE	L243
	CMP	EBX,10
	JE	L244
	CMP	EBX,11
	JE	L245
	CMP	EBX,12
	JE	L246
	CMP	EBX,13
	JE	L247
	CMP	EBX,14
	JE	L248
	CMP	EBX,15
	JE	L219
L187:
	XOR	EAX,EAX
L185:
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L219:
	CALL	_io_cli
	MOV	EAX,DWORD [-16+EBP]
	PUSH	DWORD [120+EAX]
	CALL	_fifo32_status
	POP	EDX
	TEST	EAX,EAX
	JNE	L222
	CMP	DWORD [36+EBP],0
	JE	L223
	PUSH	DWORD [-16+EBP]
	CALL	_task_sleep
	POP	EAX
L222:
	MOV	EDX,DWORD [-16+EBP]
	PUSH	DWORD [120+EDX]
	CALL	_fifo32_get
	MOV	EBX,EAX
	CALL	_io_sti
	POP	EAX
	CMP	EBX,1
	JLE	L249
L225:
	CMP	EBX,2
	JE	L250
L226:
	CMP	EBX,3
	JE	L251
L227:
	LEA	EAX,DWORD [-256+EBX]
	CMP	EAX,255
	JA	L219
	MOV	DWORD [68+EBP],EAX
	JMP	L187
L251:
	MOV	DWORD [12+ESI],-1
	JMP	L227
L250:
	MOV	DWORD [12+ESI],0
	JMP	L226
L249:
	MOV	ECX,DWORD [-16+EBP]
	PUSH	1
	PUSH	DWORD [120+ECX]
	PUSH	DWORD [16+ESI]
	CALL	_timer_init
	PUSH	50
	PUSH	DWORD [16+ESI]
	CALL	_timer_settime
	ADD	ESP,20
	JMP	L225
L223:
	CALL	_io_sti
	MOV	DWORD [68+EBP],-1
	JMP	L187
L248:
	PUSH	EDI
	PUSH	DWORD [4+EDI]
	CALL	_sheet_free
L231:
	POP	ECX
	POP	EBX
	JMP	L187
L247:
	PUSH	DWORD [16+EBP]
	PUSH	DWORD [8+EBP]
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [32+EBP]
	MOV	ESI,EDI
	PUSH	DWORD [36+EBP]
	AND	ESI,-2
	PUSH	ESI
	CALL	_hrb_api_linewin
	ADD	ESP,24
	AND	EDI,1
	JNE	L187
	MOV	EAX,DWORD [8+EBP]
	INC	EAX
	PUSH	EAX
	MOV	EAX,DWORD [12+EBP]
	INC	EAX
	PUSH	EAX
L229:
	PUSH	DWORD [32+EBP]
	PUSH	DWORD [36+EBP]
L230:
	PUSH	ESI
	PUSH	DWORD [4+ESI]
L232:
	CALL	_sheet_refresh
	ADD	ESP,24
	JMP	L187
L246:
	PUSH	DWORD [8+EBP]
	MOV	ESI,EDI
	PUSH	DWORD [12+EBP]
	JMP	L229
L245:
	MOV	ESI,EDI
	MOV	EAX,DWORD [8+EBP]
	AND	ESI,-2
	MOV	DL,BYTE [36+EBP]
	IMUL	EAX,DWORD [8+ESI]
	ADD	EAX,DWORD [12+EBP]
	MOV	ECX,DWORD [ESI]
	AND	EDI,1
	MOV	BYTE [EAX+ECX*1],DL
	JNE	L187
	MOV	EAX,DWORD [8+EBP]
	INC	EAX
	PUSH	EAX
	MOV	EAX,DWORD [12+EBP]
	INC	EAX
	PUSH	EAX
	PUSH	DWORD [8+EBP]
	PUSH	DWORD [12+EBP]
	JMP	L230
L244:
	MOV	EAX,DWORD [32+EBP]
	MOV	ECX,DWORD [-24+EBP]
	ADD	EAX,15
	AND	EAX,-16
	PUSH	EAX
	LEA	EAX,DWORD [ECX+EDI*1]
	PUSH	DWORD [36+EBP]
	PUSH	EAX
	CALL	_memman_free
L233:
	ADD	ESP,12
	JMP	L187
L243:
	MOV	EAX,DWORD [32+EBP]
	MOV	EDX,DWORD [-24+EBP]
	ADD	EAX,15
	AND	EAX,-16
	PUSH	EAX
	LEA	EAX,DWORD [EDX+EDI*1]
	PUSH	EAX
	CALL	_memman_alloc
	MOV	DWORD [68+EBP],EAX
	JMP	L231
L242:
	MOV	EAX,DWORD [-24+EBP]
	LEA	EBX,DWORD [EAX+EDI*1]
	PUSH	EBX
	CALL	_memman_init
	AND	DWORD [32+EBP],-16
	PUSH	DWORD [32+EBP]
	PUSH	DWORD [36+EBP]
	PUSH	EBX
	CALL	_memman_free
	ADD	ESP,16
	JMP	L187
L241:
	PUSH	DWORD [8+EBP]
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [32+EBP]
	MOV	ESI,EDI
	PUSH	DWORD [36+EBP]
	AND	ESI,-2
	MOVZX	EAX,BYTE [16+EBP]
	PUSH	EAX
	PUSH	DWORD [8+ESI]
	PUSH	DWORD [ESI]
	CALL	_boxfill8
	ADD	ESP,28
	AND	EDI,1
	JNE	L187
	MOV	EAX,DWORD [8+EBP]
	INC	EAX
	PUSH	EAX
	MOV	EAX,DWORD [12+EBP]
	INC	EAX
	PUSH	EAX
	PUSH	DWORD [32+EBP]
	PUSH	DWORD [36+EBP]
L234:
	PUSH	ESI
	PUSH	DWORD [-20+EBP]
	JMP	L232
L240:
	MOV	EAX,DWORD [16+EBP]
	MOV	ESI,EDI
	ADD	EAX,DWORD [-24+EBP]
	AND	ESI,-2
	PUSH	EAX
	MOVSX	EAX,BYTE [36+EBP]
	PUSH	EAX
	PUSH	DWORD [8+EBP]
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+ESI]
	PUSH	DWORD [ESI]
	CALL	_putfonts8_asc
	ADD	ESP,24
	AND	EDI,1
	JNE	L187
	MOV	ECX,DWORD [12+EBP]
	MOV	EAX,DWORD [8+EBP]
	MOV	EDX,DWORD [32+EBP]
	ADD	EAX,16
	PUSH	EAX
	LEA	EAX,DWORD [ECX+EDX*8]
	PUSH	EAX
	PUSH	DWORD [8+EBP]
	PUSH	ECX
	JMP	L234
L239:
	PUSH	DWORD [-20+EBP]
	CALL	_sheet_alloc
	MOV	ECX,DWORD [-16+EBP]
	MOV	ESI,EAX
	MOV	DWORD [36+EAX],ECX
	OR	DWORD [32+EAX],16
	PUSH	DWORD [36+EBP]
	MOV	EAX,DWORD [-24+EBP]
	PUSH	DWORD [8+EBP]
	PUSH	DWORD [12+EBP]
	LEA	EBX,DWORD [EAX+EDI*1]
	PUSH	EBX
	PUSH	ESI
	CALL	_sheet_setbuf
	MOV	EAX,DWORD [32+EBP]
	ADD	EAX,DWORD [-24+EBP]
	PUSH	EAX
	PUSH	DWORD [8+EBP]
	PUSH	DWORD [12+EBP]
	PUSH	EBX
	CALL	_make_window8
	ADD	ESP,40
	PUSH	50
	PUSH	100
	PUSH	ESI
	PUSH	DWORD [-20+EBP]
	CALL	_sheet_slide
	PUSH	3
	PUSH	ESI
	PUSH	DWORD [-20+EBP]
	CALL	_sheet_updown
	ADD	ESP,28
	MOV	DWORD [68+EBP],ESI
	JMP	L187
L238:
	MOV	EAX,DWORD [-16+EBP]
	ADD	EAX,20
	JMP	L185
L237:
	MOV	EDX,DWORD [-24+EBP]
	PUSH	DWORD [32+EBP]
	LEA	EAX,DWORD [EDX+EDI*1]
	PUSH	EAX
	PUSH	ESI
	CALL	_cons_putnstr
	JMP	L233
L236:
	MOV	ECX,DWORD [-24+EBP]
	LEA	EAX,DWORD [ECX+EDI*1]
	PUSH	EAX
	PUSH	ESI
	CALL	_cons_putstr
	JMP	L231
L235:
	PUSH	1
	MOVZX	EAX,BYTE [36+EBP]
	PUSH	EAX
	PUSH	ESI
	CALL	_cons_putchar
	JMP	L233
	GLOBAL	_hrb_api_linewin
_hrb_api_linewin:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	SUB	ESP,12
	MOV	EBX,DWORD [12+EBP]
	MOV	EAX,DWORD [20+EBP]
	MOV	ECX,EBX
	MOV	EDX,DWORD [24+EBP]
	SAL	ECX,10
	MOV	EDI,EDX
	MOV	DWORD [-16+EBP],ECX
	MOV	ESI,EAX
	MOV	ECX,DWORD [16+EBP]
	SUB	EDI,DWORD [16+EBP]
	SAL	ECX,10
	SUB	ESI,EBX
	MOV	DWORD [-20+EBP],ECX
	JS	L274
L253:
	TEST	EDI,EDI
	JS	L275
L254:
	CMP	ESI,EDI
	JL	L255
	LEA	ECX,DWORD [1+ESI]
	CMP	EBX,EAX
	MOV	ESI,-1024
	JG	L257
	MOV	ESI,1024
L257:
	CMP	DWORD [16+EBP],EDX
	JG	L258
	SUB	EDX,DWORD [16+EBP]
	INC	EDX
L273:
	SAL	EDX,10
	MOV	EAX,EDX
	CDQ
	IDIV	ECX
	MOV	EDI,EAX
L260:
	TEST	ECX,ECX
	JLE	L271
	MOV	EBX,ECX
L269:
	MOV	EDX,DWORD [8+EBP]
	MOV	EAX,DWORD [-20+EBP]
	SAR	EAX,10
	MOV	ECX,DWORD [-16+EBP]
	IMUL	EAX,DWORD [8+EDX]
	SAR	ECX,10
	MOV	DWORD [-24+EBP],ECX
	MOV	ECX,DWORD [EDX]
	ADD	EAX,DWORD [-24+EBP]
	MOV	DL,BYTE [28+EBP]
	MOV	BYTE [EAX+ECX*1],DL
	ADD	DWORD [-16+EBP],ESI
	ADD	DWORD [-20+EBP],EDI
	DEC	EBX
	JNE	L269
L271:
	ADD	ESP,12
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L258:
	SUB	EDX,DWORD [16+EBP]
	DEC	EDX
	JMP	L273
L255:
	LEA	ECX,DWORD [1+EDI]
	CMP	DWORD [16+EBP],EDX
	MOV	EDI,-1024
	JG	L262
	MOV	EDI,1024
L262:
	CMP	EBX,EAX
	JG	L263
	SUB	EAX,EBX
	LEA	EDX,DWORD [1+EAX]
L272:
	SAL	EDX,10
	MOV	EAX,EDX
	CDQ
	IDIV	ECX
	MOV	ESI,EAX
	JMP	L260
L263:
	SUB	EAX,EBX
	LEA	EDX,DWORD [-1+EAX]
	JMP	L272
L275:
	NEG	EDI
	JMP	L254
L274:
	NEG	ESI
	JMP	L253
	GLOBAL	_command_list
[SECTION .data]
	ALIGNB	4
_command_list:
	RESB	4
